diff --git a/node_modules/react-native-gifted-chat/lib/Composer.js b/node_modules/react-native-gifted-chat/lib/Composer.js
index 3331d31..b8fbca6 100644
--- a/node_modules/react-native-gifted-chat/lib/Composer.js
+++ b/node_modules/react-native-gifted-chat/lib/Composer.js
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import { Platform, StyleSheet, TextInput } from 'react-native';
+import { Platform, StyleSheet, TextInput, View } from 'react-native';
 import { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from './Constant';
 import Color from './Color';
 import { StylePropType } from './utils';
@@ -23,7 +23,7 @@ const styles = StyleSheet.create({
         }),
         marginBottom: Platform.select({
             ios: 5,
-            android: 3,
+            android: 0,
             web: 4,
         }),
     },
@@ -51,20 +51,27 @@ export default class Composer extends React.Component {
         };
     }
     render() {
-        return (<TextInput testID={this.props.placeholder} accessible accessibilityLabel={this.props.placeholder} placeholder={this.props.placeholder} placeholderTextColor={this.props.placeholderTextColor} multiline={this.props.multiline} editable={!this.props.disableComposer} onChange={this.onContentSizeChange} onContentSizeChange={this.onContentSizeChange} onChangeText={this.onChangeText} style={[
-            styles.textInput,
-            this.props.textInputStyle,
-            {
-                height: this.props.composerHeight,
-                ...Platform.select({
-                    web: {
+        return (
+          <View accessible={true} accessibilityLabel={'Type message here'}
+                style={[
+                  styles.textInput,
+                  {
+                    height: this.props.composerHeight,
+                    ...Platform.select({
+                      web: {
                         outlineWidth: 0,
                         outlineColor: 'transparent',
                         outlineOffset: 0,
-                    },
-                }),
-            },
-        ]} autoFocus={this.props.textInputAutoFocus} value={this.props.text} enablesReturnKeyAutomatically underlineColorAndroid='transparent' keyboardAppearance={this.props.keyboardAppearance} {...this.props.textInputProps}/>);
+                      },
+                    }),
+                  },
+                ]}>
+          <TextInput maxFontSizeMultiplier={1.3} testID={this.props.placeholder} placeholder={this.props.placeholder} placeholderTextColor={this.props.placeholderTextColor} multiline={this.props.multiline} editable={!this.props.disableComposer} onChange={this.onContentSizeChange} onContentSizeChange={this.onContentSizeChange} onChangeText={this.onChangeText} autoFocus={this.props.textInputAutoFocus} value={this.props.text} enablesReturnKeyAutomatically underlineColorAndroid='transparent' keyboardAppearance={this.props.keyboardAppearance} {...this.props.textInputProps}
+                     style={[
+                       this.props.textInputStyle,
+                     ]}/>
+        </View>
+        );
     }
 }
 Composer.defaultProps = {
